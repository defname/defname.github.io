var g=Object.defineProperty;var R=(a,t,e)=>t in a?g(a,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):a[t]=e;var s=(a,t,e)=>(R(a,typeof t!="symbol"?t+"":t,e),e);import{m,b as p,c as y,e as v,d as D}from"./helpers-O1WMooQx.js";import{l as c}from"./livequery-7XNqutJr.js";import{Z as A,G as k,u as w,$ as M,ai as E}from"./index-iO1bX4p0.js";import{l as b}from"./liveriskstree-KWglCX74.js";const l={company:"",startDate:0,endDate:void 0,address:"",jobDescr:"",equipment:[],technicians:[],supervisors:[],access:[],risks:[],measures:{},meta:{}};class B{constructor(t){s(this,"id");s(this,"descr");s(this,"company");s(this,"startDate");s(this,"endDate");s(this,"address");s(this,"jobDescr");s(this,"equipment");s(this,"technicians");s(this,"supervisors");s(this,"access");s(this,"risks");s(this,"allRisks");s(this,"measures");s(this,"meta");s(this,"initData");s(this,"isReady");s(this,"ready");this.initData={...l},this.isReady=!1,this.init(t)}init(t){this.isReady=!1,this.measures={},this.meta={},this.allRisks=[],m(this,p(l)),t&&m(this,t),this.updateInitData()}clear(){this.init(),this.id=void 0}updateInitData(){const t=p(y(this,l));this.initData=t}reset(){m(this,this.initData)}modified(){for(let t in this.initData)if(!v(this[t],this.initData[t]))return!0;return!1}loadFromDb(t){return this.init({id:t}),this.ready=c.ready().then(()=>c.table("riskassessments").getAsPromise(t)).then(e=>{this.init(e),this.isReady=!0}).catch(e=>{throw Error(e)}),this.ready}async save(){if(this.id===void 0)throw Error("Attempt to update without id");let t={};return t=p(y(this,l)),D.riskassessments.update(this.id,t).then(e=>{if(e===0)throw Error("Could not update. Does ID "+this.id+" exist?");const i=Math.floor(Date.now()/1e3);D.riskassessmentsmeta.update(this.id,{lastChange:i}),this.updateInitData()})}dateStr(t){return t.getUTCFullYear()+"-"+(t.getUTCMonth()+1)+"-"+t.getUTCDate()}getStartDate(){return new Date(this.startDate)}setStartDate(t){this.startDate=this.dateStr(t)}getEndDate(){if(this.endDate)return new Date(this.endDate)}setEndDate(t){t===void 0?this.endDate=void 0:this.endDate=this.dateStr(t)}async calcAllRisks(){await b.ready();const t=await c.table("measures").ready(),e=await c.table("equipment").ready(),i=[],r=[...this.risks];for(this.resetMetaAddedBy(),this.equipment.forEach(n=>{e.get(n).causeRisks.forEach(d=>{r.push(d);const o=this.getMeta(d);o.addedBy.find(h=>h.id===n&&h.type==="equipment")||o.addedBy.push({id:n,type:"equipment"})})});r.length>0;){const n=r.pop();i.includes(n)||(i.push(n),this.getMeasures(n).forEach(d=>{t.get(d).causeRisks.forEach(o=>{r.push(o);const h=this.getMeta(o);h.addedBy.find(f=>f.id===d&&f.type==="measure")||h.addedBy.push({id:d,type:"measure"})})}))}return this.allRisks=i,i}resetMetaAddedBy(){for(let t in this.meta)this.getMeta(parseInt(t)).addedBy.length=0}getMeta(t){return this.meta[t]===void 0&&(this.meta[t]={risk:t,addedBy:[]}),this.meta[t]}getMeasures(t){return this.measures[t]===void 0&&(this.measures[t]=[]),this.measures[t]}getMeasuresAsRef(t){return k(this.getMeasures(t))}addSector(t={}){const e=this.access.map(i=>i.id?i.id:0).reduce((i,r)=>i>r?i+1:r+1,0);this.access.push({id:e,title:"Neuer Sektor "+e,entrance:"",exit:"",anchorPoints:"",comment:"",rescue:"",...t})}}const u=A(new B);function C(a){const t=w();let e=a;return t&&t.path.startsWith("/riskassessment")&&t.params.id!==void 0&&(e=parseInt(t.params.id)),e===void 0||u.id===e||u.loadFromDb(e),u}function F(a){const t=C(a),e=k([]),i=()=>{console.log("useLiveAllRisks(): updateAllRisks()"),t.calcAllRisks().then(r=>{e.value=r,console.log("useLiveAllRisks(): updateAllRisks() -> Done")})};return M([()=>t.risks,()=>t.isReady],i),E(()=>{i()}),e}export{F as a,l as d,C as u};
