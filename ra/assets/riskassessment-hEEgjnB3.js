var M=Object.defineProperty;var C=(d,s,t)=>s in d?M(d,s,{enumerable:!0,configurable:!0,writable:!0,value:t}):d[s]=t;var r=(d,s,t)=>(C(d,typeof s!="symbol"?s+"":s,t),t);import{m as D,a as y,p as v,b as q,c as x,d as c,i as w}from"./database-GtjOZku2.js";import{l as m}from"./livequery-DZoN91kH.js";import{ak as b,x as A,u as S,al as B,aB as T,ab as j}from"./index-6YVP06UH.js";import{l as R}from"./liveriskstree-dDb20zb1.js";import{a as L}from"./helpers-iJWbSvob.js";const p={company:"",startDate:0,endDate:void 0,address:"",jobDescr:"",equipment:[],technicians:[],supervisors:[],access:[],risks:[],measures:{},meta:{}};class z{constructor(s){r(this,"time");r(this,"signature");this.signature=s,this.time=Date.now()/1e3}}class P{constructor(s){r(this,"id");r(this,"descr");r(this,"company");r(this,"startDate");r(this,"endDate");r(this,"address");r(this,"jobDescr");r(this,"equipment");r(this,"technicians");r(this,"supervisors");r(this,"access");r(this,"risks");r(this,"allRisks");r(this,"measures");r(this,"meta");r(this,"initData");r(this,"isReady");r(this,"ready");r(this,"lastChange");r(this,"signatures");r(this,"signature");this.initData={...p},this.isReady=!1,this.init(s)}init(s){this.isReady=!1,this.measures={},this.meta={},this.allRisks=[],this.lastChange=-1,this.signatures=[],this.signature=void 0,D(this,y(p)),s&&D(this,s),this.updateInitData()}clear(){this.init(),this.id=void 0}updateInitData(){const s=y(v(this,p));this.initData=s}reset(){D(this,this.initData)}modified(){for(let s in this.initData)if(!q(this[s],this.initData[s]))return!0;return!1}changes(){return x(this.initData,this,Object.keys(this.initData))}loadFromDb(s){return this.init({id:s}),this.ready=m.ready().then(()=>m.table("riskassessments").getAsPromise(s)).then(t=>{this.init(t),this.isReady=!0}).catch(t=>{throw Error(t)}),this.ready}async save(){if(this.id===void 0)throw Error("Attempt to update without id");let s={};return s=y(v(this,p)),c.riskassessments.update(this.id,s).then(t=>{if(t===0)throw Error("Could not update. Does ID "+this.id+" exist?");const u=Math.floor(Date.now()/1e3);c.riskassessmentsmeta.update(this.id,{lastChange:u}),this.lastChange=u,this.updateInitData()})}dateStr(s){return s.getUTCFullYear()+"-"+(s.getUTCMonth()+1)+"-"+s.getUTCDate()}getStartDate(){return new Date(this.startDate)}setStartDate(s){this.startDate=this.dateStr(s)}getEndDate(){if(this.endDate)return new Date(this.endDate)}setEndDate(s){s===void 0?this.endDate=void 0:this.endDate=this.dateStr(s)}async calcAllRisks(){await R.ready();const s=await m.table("measures").ready(),t=await m.table("equipment").ready(),u=[],o=[...this.risks];for(this.resetMetaAddedBy(),this.equipment.forEach(a=>{t.get(a).causeRisks.forEach(e=>{o.push(e);const n=this.getMeta(e);n.addedBy.find(i=>i.id===a&&i.type==="equipment")||n.addedBy.push({id:a,type:"equipment"})})});o.length>0;){const a=o.pop();u.includes(a)||(u.push(a),this.getMeasures(a).forEach(e=>{s.get(e).causeRisks.forEach(n=>{o.push(n);const i=this.getMeta(n);i.addedBy.find(h=>h.id===e&&h.type==="measure")||i.addedBy.push({id:e,type:"measure"})})}))}return this.allRisks=u,u}resetMetaAddedBy(){for(let s in this.meta)this.getMeta(parseInt(s)).addedBy.length=0}getMeta(s){return this.meta[s]===void 0&&(this.meta[s]={risk:s,addedBy:[]}),this.meta[s]}getMeasures(s){return this.measures[s]===void 0&&(this.measures[s]=[]),this.measures[s]}getMeasuresAsRef(s){return A(this.getMeasures(s))}addSector(s={}){const t=this.access.map(o=>o.id?o.id:0).reduce((o,a)=>o>a?o+1:a+1,0),u={id:t,title:"Neuer Sektor "+t,entrance:"",exit:"",anchorPoints:"",comment:"",rescue:"",...s};this.access.push(u)}updateTechnicianSignature(s,t){this.signatures===void 0&&(this.signatures=[]),this.signatures[s]=t}mergePreset(s,t=!1){console.log("RiskAssessment: mergePreset()"),console.log(s),["company","startDate","endDate","address","jobDescr"].forEach(e=>{w(s[e])||!t&&!w(this[e])||(this[e]=s[e])});function o(e,n,i=(h,l)=>h===l){const h=n.filter(l=>e.findIndex(k=>i(l,k))===-1);return[...e,...h]}if(s.equipment&&s.equipment.length>0&&(this.equipment=o(this.equipment,s.equipment)),s.risks&&s.risks.length>0&&(this.risks=o(this.risks,s.risks)),s.measures)for(let e in s.measures)this.measures[e]===void 0?this.measures[e]=[...s.measures[e]]:this.measures[e]=o(this.measures[e],s.measures[e]);function a(e,n,i="\n"){return e===void 0||e.trim()===""?n:n.trim()===""?e:e+i+n}if(s.access&&s.access.forEach(e=>{const n=this.access.find(i=>e.title===i.title);n?["anchorPoints","comment","entrance","exit","rescue"].forEach(i=>{n[i]=a(n[i],e[i])}):(delete e.id,this.addSector(e))}),s.meta)for(let e in s.meta)this.meta[e]||(this.meta[e]={risk:parseInt(e),addedBy:[],comment:""}),this.meta[e].comment=a(this.meta[e].comment,s.meta[e].comment||"");this.calcAllRisks()}}const f=b(new P);function E(d){const s=S();let t=d;return s&&s.path.startsWith("/riskassessment")&&s.params.id!==void 0&&(t=parseInt(s.params.id)),t===void 0||f.id===t||f.loadFromDb(t),f}function G(){function d(a="default",e=p){return c.riskassessments.add({...e}).then(n=>{const i=Math.floor(Date.now()/1e3);c.riskassessmentsmeta.add({id:n,descr:"Neue Gefährdungsbeurteilung "+n,created:i,lastChange:i,type:a}).then(()=>{})})}async function s(a){return c.riskassessments.get(a).then(e=>{if(e===void 0)throw Error("riskassessment "+a+" canno be duplicated, since it does not exist in the database");return delete e.id,c.riskassessments.add(e)}).then(e=>c.riskassessmentsmeta.get(a).then(n=>{if(n===void 0)throw Error("riskassessmentMeta for riskassessment "+a+" not found in database.");const i=Math.floor(Date.now()/1e3);return c.riskassessmentsmeta.add({...n,id:e,descr:"Kopie von "+n.descr,created:i,lastChange:i})}))}function t(a,e){if(f.id!==void 0)return c.riskassessmentsmeta.update(a,{descr:e})}function u(a){L("Soll der Einsatzplan wirklich unwideruflich gelöscht werden?",{text:"Löschen",icon:j,handler:()=>{c.table("riskassessments").delete(a),c.table("riskassessmentsmeta").delete(a)}})}async function o(a,e){return c.riskassessmentsmeta.update(a,{type:e})}return{addNewRiskAssessment:d,duplicateRiskAssessment:s,changeRiskAssessmentMetaDescr:t,changeRiskAssessmentType:o,deleteRiskAssessment:u}}function H(d){const s=E(d),t=A([]),u=()=>{console.log("useLiveAllRisks(): updateAllRisks()"),s.calcAllRisks().then(o=>{t.value=o,console.log("useLiveAllRisks(): updateAllRisks() -> Done")})};return B([()=>s.risks,()=>s.isReady],u),T(()=>{u()}),t}function Q(d){const s=E(d),t=b({risks:[]});async function u(){var n;await s.ready,await R.ready();const o=await m.table("measures").ready();await s.calcAllRisks(),t.risks=s.allRisks.map(i=>({risk:R.get(i),measures:s.measures[i].map(h=>o.get(h)),meta:s.getMeta(i)})),t.categories=t.risks.reduce((i,h)=>{const l=h.risk.factor.category,g=i.findIndex(k=>k.id===l.id);return g===-1?(i.push({...l,risks:[h]}),i):(i[g].risks.push(h),i)},[]);const a=await m.table("technicians").ready();t.technicians=s.technicians.map(i=>a.get(i)),t.supervisors=s.supervisors.map(i=>a.get(i));const e=await m.table("equipment").ready();t.equipment=s.equipment.map(i=>e.get(i)),t.access=s.access.map(i=>i),t.company=s.company,t.address=s.address,t.startDate=s.startDate,t.endDate=s.endDate,t.jobDescr=s.jobDescr,t.signatures=(n=s.signatures)==null?void 0:n.filter(i=>s.lastChange===-1||i.time>s.lastChange),t.signature=s.lastChange===-1||s.signature&&s.lastChange<s.signature.time?s.signature:void 0}return t.ready=u(),{exportData:t,updateExportData:u}}export{z as S,G as a,H as b,Q as c,E as u};
