var v=Object.defineProperty;var f=(s,e,t)=>e in s?v(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var a=(s,e,t)=>(f(s,typeof e!="symbol"?e+"":e,t),t);import{d as m,m as w}from"./database-y4SrtzQs.js";import{ac as c,x as y,au as R,ay as E}from"./index-xm7OlJwR.js";class g{constructor(e,t,i="id"){a(this,"_db");a(this,"_tableName");a(this,"_primKey");a(this,"_table");a(this,"_entries");a(this,"_entriesById");a(this,"_lastKey");a(this,"_ready");a(this,"_isReady");a(this,"_updated");this._db=e,this._tableName=t,this._primKey=i,this._table=this._db.table(this._tableName),console.log(this._table),this._entries=c([]),this._entriesById=c({}),this._updated=y(0),this._isReady=y(!1),this._lastKey=0,this._ready=this._table.each((n,o)=>{this.addEntry(o.primaryKey,n)}).then(()=>(this._table.hook("creating",this.onCreating.bind(this)),this._table.hook("updating",this.onUpdate.bind(this)),this._table.hook("deleting",this.onDeleting.bind(this)),this)),this._ready.then(()=>{console.log("Live table "+t+" intialized."),this._isReady.value=!0})}ready(){return this._ready}isReady(){return this._isReady}updated(){return this._updated}entries(){return this._entries}get(e){return this._entriesById[e]}getAsPromise(e){return this.ready().then(t=>t.get(e))}getAsRef(e){const t=y(void 0);return this.getAsPromise(e).then(i=>{t.value=i}),t}delete(e){return this.ready().then(()=>this._table.where(this._primKey).equals(e).delete())}db(){return this._db}onCreating(e,t,i){let n=this.addEntry(e,t);return console.log("LiveTable: "+this._tableName+" added object with primary key "+n),console.log(t),n}onUpdate(e,t,i,n){console.log("MODS"),console.log(e),this.updateEntry(t,e)}onDeleting(e){this.deleteEntry(e)}addEntry(e,t){this._lastKey,e!==void 0&&e>this._lastKey?this._lastKey=e:this._lastKey++;const i=c(t);return i.id=this._lastKey,this._entriesById[this._lastKey]=i,this._entries.push(i),this._updated.value++,this._lastKey}modificationsToPartialT(e){const t={},i=(n,o,l=t)=>{const h=n.indexOf(".");if(console.log(n,h),h===-1){l[n]=e[o];return}const d=n.slice(0,h),_=n.slice(h+1);l[d]===void 0&&(l[d]={}),i(_,o,l[d])};for(let n in e)i(n,n,t);return t}updateEntry(e,t){if(this._entriesById[e]===void 0)throw Error("LiveTable: There is no primary key "+e+" in "+this._tableName);w(this._entriesById[e],this.modificationsToPartialT(t)),console.log("LiveTable: updated object with primary key "+e),console.log(this._entriesById[e]),this._updated.value++}deleteEntry(e){let t=this._entries.indexOf(this._entriesById[e]);if(t===-1){console.warn("LiveTable: trying to delete non existing element with primary key "+e);return}this._entries.splice(t,1),delete this._entriesById[e],console.log("LiveTable: removed entry with primary key "+e+" from table"),this._updated.value++}}class K{constructor(e,t=!1){a(this,"_db");a(this,"_tables");a(this,"_lazy");a(this,"_ready");a(this,"_resolve");this._lazy=t,this._db=e,this._tables={},this._ready=new Promise(i=>{this._resolve=i,this._db.on("ready",this.onDbReady.bind(this))})}ready(){return this._ready}table(e){if(this._lazy)return this._tables[e]===void 0&&(this._tables[e]=new g(this._db,e)),this._tables[e];{const t=this._tables[e];if(t===void 0)throw Error("There is no table with name "+e);return t}}onDbReady(e){if(console.log("liveQueryManager onDbReady()"),this._lazy){console.log("LiveQueryManager: initialization finished (lazy)"),this._resolve.call(this);return}else{let t=[];this._db.tables.forEach(i=>{this._tables[i.name]=new g(this._db,i.name),t.push(this._tables[i.name].ready())}),Promise.all(t).then(()=>{console.log("LiveQueryManager: initialization finished (non-lazy)"),this._resolve.call(this)})}}}const z=new K(m,!0);function B(s,e,t,i=!1,n=void 0){const o=y(n);function l(r,b,u){return u.on("complete",_),r}function h(r,b,u,p){p.on("complete",_)}function d(r,b,u){u.on("complete",_)}async function _(){i?o.value=await t(s):o.value=t(s)}return R(()=>{e.forEach(r=>{s.table(r).hook("creating",l),s.table(r).hook("updating",h),s.table(r).hook("deleting",d)}),_()}),E(()=>{e.forEach(r=>{s.table(r).hook("creating").unsubscribe(l),s.table(r).hook("updating").unsubscribe(h),s.table(r).hook("deleting").unsubscribe(d)})}),o}export{g as L,z as l,B as u};
