var k=Object.defineProperty;var g=(a,e,t)=>e in a?k(a,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[e]=t;var s=(a,e,t)=>(g(a,typeof e!="symbol"?e+"":e,t),t);import{m as h,b as u,c as D,e as R,d as f}from"./helpers-d_hvXeLi.js";import{l as c}from"./livequery-N0RiMmpp.js";import{W as v,G as y,u as A,U as w,ag as M}from"./index-YvNBdq1j.js";import{l as E}from"./liveriskstree-uYgo7w9o.js";const o={company:"",startDate:0,endDate:void 0,address:"",jobDescr:"",equipment:[],technicians:[],supervisors:[],access:[],risks:[],measures:{},meta:{}};class b{constructor(e){s(this,"id");s(this,"descr");s(this,"company");s(this,"startDate");s(this,"endDate");s(this,"address");s(this,"jobDescr");s(this,"equipment");s(this,"technicians");s(this,"supervisors");s(this,"access");s(this,"risks");s(this,"measures");s(this,"meta");s(this,"initData");s(this,"isReady");s(this,"ready");this.initData={...o},this.isReady=!1,this.init(e)}init(e){this.isReady=!1,this.measures={},this.meta={},h(this,u(o)),e&&h(this,e),this.updateInitData()}clear(){this.init(),this.id=void 0}updateInitData(){const e=u(D(this,o));this.initData=e}reset(){h(this,this.initData)}modified(){for(let e in this.initData)if(!R(this[e],this.initData[e]))return!0;return!1}loadFromDb(e){return this.init({id:e}),this.ready=c.ready().then(()=>c.table("riskassessments").getAsPromise(e)).then(t=>{this.init(t),this.isReady=!0}).catch(t=>{throw Error(t)}),this.ready}async save(){if(this.id===void 0)throw Error("Attempt to update without id");let e={};return e=u(D(this,o)),f.riskassessments.update(this.id,e).then(t=>{if(t===0)throw Error("Could not update. Does ID "+this.id+" exist?");const i=Math.floor(Date.now()/1e3);f.riskassessmentsmeta.update(this.id,{lastChange:i}),this.updateInitData()})}dateStr(e){return e.getUTCFullYear()+"-"+(e.getUTCMonth()+1)+"-"+e.getUTCDate()}getStartDate(){return new Date(this.startDate)}setStartDate(e){this.startDate=this.dateStr(e)}getEndDate(){if(this.endDate)return new Date(this.endDate)}setEndDate(e){e===void 0?this.endDate=void 0:this.endDate=this.dateStr(e)}async calcAllRisks(){await E.ready();const e=await c.table("measures").ready(),t=[],i=[...this.risks];for(this.resetMetaAddedBy(),this.equipment.forEach(r=>{});i.length>0;){const r=i.pop();t.includes(r)||(t.push(r),this.getMeasures(r).forEach(d=>{e.get(d).causeRisks.forEach(l=>{i.push(l);const m=this.getMeta(l);m.addedBy.find(p=>p.id===d&&p.type==="measure")||m.addedBy.push({id:d,type:"measure"})})}))}return t}resetMetaAddedBy(){for(let e in this.meta)this.getMeta(parseInt(e)).addedBy.length=0}getMeta(e){return this.meta[e]===void 0&&(this.meta[e]={risk:e,addedBy:[]}),this.meta[e]}getMeasures(e){return this.measures[e]===void 0&&(this.measures[e]=[]),this.measures[e]}getMeasuresAsRef(e){return y(this.getMeasures(e))}addSector(e={}){const t=this.access.map(i=>i.id?i.id:0).reduce((i,r)=>i>r?i+1:r+1,0);this.access.push({id:t,title:"Neuer Sektor "+t,entrance:"",exit:"",anchorPoints:"",comment:"",rescue:"",...e})}}const n=v(new b);function B(a){const e=A();let t=a;return e&&e.path.startsWith("/riskassessment")&&e.params.id!==void 0&&(t=parseInt(e.params.id)),t===void 0?(n.clear(),n):(n.id===t||n.loadFromDb(t),n)}function U(a){const e=B(a),t=y([]),i=()=>{console.log("useLiveAllRisks(): updateAllRisks()"),e.calcAllRisks().then(r=>{t.value=r,console.log("useLiveAllRisks(): updateAllRisks() -> Done")})};return w([()=>e.risks,()=>e.isReady],i),M(()=>{i()}),t}export{U as a,o as d,B as u};
